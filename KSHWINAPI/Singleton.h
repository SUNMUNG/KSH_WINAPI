#pragma once

template<typename T>
class Singleton
{
public:
	static T& Get()
	{
		static T instance;
		return instance;
	}

protected:
	Singleton() = default;
	virtual ~Singleton() = default;

	// Singleton : 클래스의 인스턴스가 1개만 있는 클래스. 
	// private에 생성자를 넣어서 밖에서 인스턴스화 하는 것을 원천적으로 봉쇄
	Singleton(const Singleton&) = delete;	// 복사 생성자 삭제
	Singleton& operator=(const Singleton&) = delete; // 대입 연산자 삭제
	Singleton(const Singleton&&) = delete;	// 이동 생성자 삭제
	Singleton& operator=(const Singleton&&) = delete; // 이동 대입 연산자 삭제
};